# ===============================================================
# üß† MACHINE LEARNING APLICADO √Ä SA√öDE ‚Äî DIABETES
# ===============================================================

import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.datasets import load_diabetes
from modelo_diabetes import ModelosMLDiabetes
import numpy as np

# ---------------------------------------------------------------
# ‚öôÔ∏è Configura√ß√£o inicial
# ---------------------------------------------------------------
st.set_page_config(page_title="An√°lise Preditiva ‚Äî Diabetes", layout="wide")
sns.set_theme(style="whitegrid")

# ---------------------------------------------------------------
# üì• Carregar dados
# ---------------------------------------------------------------
@st.cache_data(show_spinner=False)
def get_data():
    diabetes = load_diabetes()
    df = pd.DataFrame(diabetes.data, columns=diabetes.feature_names)
    df["target"] = diabetes.target
    df["sexo_label"] = df["sex"].apply(lambda x: "Masculino" if x > 0 else "Feminino")
    df["faixa_etaria"] = pd.cut(
        df["age"],
        bins=[-0.12, -0.06, 0.0, 0.06, 0.12],
        labels=["Jovens", "Adultos Jovens", "Adultos", "Idosos"]
    )
    return df, diabetes

# ---------------------------------------------------------------
# üß† Treinar modelos
# ---------------------------------------------------------------
@st.cache_resource(show_spinner=True)
def treinar_modelos(df):
    modelos = ModelosMLDiabetes(df)
    cls_metrics, importancias = modelos.treinar_classificacao()
    reg_metrics = modelos.treinar_regressao()
    df_clusters, sil = modelos.treinar_clusterizacao(n_clusters=4)  # fixo no backend
    return modelos, cls_metrics, importancias, reg_metrics, df_clusters, sil

# ---------------------------------------------------------------
# üß≠ Sidebar
# ---------------------------------------------------------------
st.sidebar.title("üß≠ Navega√ß√£o")
page = st.sidebar.radio("Ir para", ["An√°lise Preditiva", "Hub Preditivo", "Sobre"])

# ---------------------------------------------------------------
# üîπ Carregar dados e modelos
# ---------------------------------------------------------------
df, diabetes = get_data()
modelos, cls_metrics, importancias, reg_metrics, df_clusters, sil = treinar_modelos(df)

# ===============================================================
# 1Ô∏è‚É£ AN√ÅLISE PREDITIVA ‚Äî VIS√ÉO CL√çNICA
# ===============================================================
if page == "An√°lise Preditiva":
    st.title("üìä An√°lise Preditiva ‚Äî Dados Cl√≠nicos de Diabetes")
    st.markdown("""
    Esta se√ß√£o apresenta uma **an√°lise detalhada dos principais indicadores cl√≠nicos**
    relacionados √† progress√£o do diabetes.  
    O objetivo √© apoiar decis√µes m√©dicas ao identificar **padr√µes de risco e tend√™ncias**.
    """)

    st.divider()

    # -----------------------------------------------------------
    # üéØ Filtros Interativos
    # -----------------------------------------------------------
    st.sidebar.subheader("üîß Filtros para an√°lise")
    sexo_filter = st.sidebar.multiselect("Sexo", df["sexo_label"].unique(), default=df["sexo_label"].unique())
    faixa_filter = st.sidebar.multiselect("Faixa Et√°ria", df["faixa_etaria"].unique(), default=df["faixa_etaria"].unique())
    df_filtered = df[(df["sexo_label"].isin(sexo_filter)) & (df["faixa_etaria"].isin(faixa_filter))]

    # -----------------------------------------------------------
    # üë• Perfil Demogr√°fico
    # -----------------------------------------------------------
    st.markdown("### üë• Perfil Demogr√°fico dos Pacientes")
    col1, col2 = st.columns(2)

    with col1:
        fig, ax = plt.subplots(figsize=(5, 4))
        sns.countplot(x="sexo_label", data=df_filtered, palette="Set2", ax=ax)
        ax.set_title("Distribui√ß√£o por Sexo")
        ax.set_xlabel("")
        ax.set_ylabel("Quantidade de Pacientes")
        st.pyplot(fig)

    with col2:
        fig, ax = plt.subplots(figsize=(5, 4))
        sns.countplot(x="faixa_etaria", data=df_filtered, palette="crest", ax=ax)
        ax.set_title("Distribui√ß√£o por Faixa Et√°ria")
        ax.set_xlabel("")
        ax.set_ylabel("Quantidade de Pacientes")
        st.pyplot(fig)

    st.info("üîπ Observa-se uma leve predomin√¢ncia de adultos e adultos jovens, com equil√≠brio entre os sexos.")

    st.divider()

    # -----------------------------------------------------------
    # ‚ù§Ô∏è Indicadores Metab√≥licos
    # -----------------------------------------------------------
    st.markdown("### ‚ù§Ô∏è Indicadores Metab√≥licos e de Risco")

    col1, col2 = st.columns(2)
    with col1:
        fig, ax = plt.subplots(figsize=(6, 4))
        sns.scatterplot(x="bmi", y="s5", hue="sexo_label", data=df_filtered, palette="coolwarm", ax=ax)
        ax.set_xlabel("IMC (√çndice de Massa Corporal)")
        ax.set_ylabel("N√≠vel de Glicose (mg/dL)")
        ax.set_title("Rela√ß√£o entre IMC e Glicose")
        st.pyplot(fig)

    with col2:
        fig, ax = plt.subplots(figsize=(6, 4))
        sns.scatterplot(x="bp", y="s2", hue="faixa_etaria", data=df_filtered, palette="viridis", ax=ax)
        ax.set_xlabel("Press√£o Arterial M√©dia (mmHg)")
        ax.set_ylabel("LDL (Colesterol Ruim, mg/dL)")
        ax.set_title("Press√£o Arterial vs LDL")
        st.pyplot(fig)

    st.info("üí° Pacientes com IMC mais alto e maior glicose tendem a apresentar progress√£o mais r√°pida da doen√ßa.")

    st.divider()

    # -----------------------------------------------------------
    # ü©∏ Compara√ß√µes por Grupo
    # -----------------------------------------------------------
    st.markdown("### ü©∏ Compara√ß√µes Cl√≠nicas por Grupo")
    col1, col2 = st.columns(2)

    with col1:
        fig, ax = plt.subplots(figsize=(6, 4))
        sns.boxplot(x="faixa_etaria", y="bmi", data=df_filtered, palette="Set3", ax=ax)
        ax.set_xlabel("Faixa Et√°ria")
        ax.set_ylabel("IMC")
        ax.set_title("Distribui√ß√£o de IMC por Faixa Et√°ria")
        st.pyplot(fig)

    with col2:
        fig, ax = plt.subplots(figsize=(6, 4))
        sns.boxplot(x="sexo_label", y="bp", data=df_filtered, palette="Set2", ax=ax)
        ax.set_xlabel("Sexo")
        ax.set_ylabel("Press√£o Arterial M√©dia")
        ax.set_title("Press√£o Arterial M√©dia por Sexo")
        st.pyplot(fig)

    st.success("‚úÖ Homens tendem a ter **press√£o arterial ligeiramente mais alta**, enquanto o **IMC cresce com a idade**.")

# ===============================================================
# 2Ô∏è‚É£ HUB PREDITIVO ‚Äî MODELOS DE MACHINE LEARNING
# ===============================================================
elif page == "Hub Preditivo":
    st.title("üß† Hub de Modelagem Preditiva ‚Äî Diabetes")
    st.markdown("""
    Simule o **perfil cl√≠nico de um paciente** e obtenha uma **predi√ß√£o automatizada** do risco,
    da progress√£o da doen√ßa e do **perfil de grupo cl√≠nico (cluster)** com base em 
    modelos de **classifica√ß√£o, regress√£o e clusteriza√ß√£o (K-Means)**.
    """)

    st.divider()
    st.header("üîÆ Predi√ß√£o Personalizada")

    # Agora temos 3 abas
    tabs = st.tabs([
        "Classifica√ß√£o (Baixa/Alta)",
        "Regress√£o (Valor Cont√≠nuo)",
        "üß© Agrupamento (Perfil de Grupo)"
    ])

    # üü¢ CLASSIFICA√á√ÉO
    with tabs[0]:
        st.subheader("ü©∫ Classifica√ß√£o de Risco de Diabetes")
        st.info("Ajuste os valores abaixo para simular o perfil cl√≠nico do paciente:")

        feature_labels_real = {
            "age": ("Idade (anos)", 20.0, 80.0, 40.0),
            "bmi": ("IMC (√çndice de Massa Corporal)", 15.0, 40.0, 25.0),
            "bp": ("Press√£o Arterial M√©dia (mmHg)", 60.0, 140.0, 90.0),
            "s1": ("Colesterol Total (mg/dL)", 150.0, 300.0, 200.0),
            "s2": ("LDL (Colesterol Ruim, mg/dL)", 70.0, 190.0, 120.0),
            "s3": ("HDL (Colesterol Bom, mg/dL)", 30.0, 80.0, 50.0),
            "s4": ("Triglicer√≠deos (mg/dL)", 50.0, 250.0, 150.0),
            "s5": ("N√≠vel de Glicose (mg/dL)", 70.0, 250.0, 110.0),
            "s6": ("Insulina no Sangue (¬µU/mL)", 2.0, 25.0, 10.0)
        }

        inputs = {}
        for col, (label, vmin, vmax, vmed) in feature_labels_real.items():
            inputs[col] = st.slider(label, float(vmin), float(vmax), float(vmed), step=1.0, key=f"class_{col}")

        X_user = []
        for col in cls_metrics["X_cols"]:
            if col == "sex":
                X_user.append(0.0)
            elif col in inputs:
                val = inputs[col]
                vmin, vmax, vmed = feature_labels_real[col][1:]
                norm = (val - vmed) / (vmax - vmin)
                X_user.append(norm)
            else:
                X_user.append(0.0)

        pred, proba = modelos.prever_classificacao(X_user)

        color = "#2ecc71" if pred == "Baixa" else "#e74c3c"
        titulo = "Risco de Diabetes: Baixo" if pred == "Baixa" else "Risco de Diabetes: Alto"

        st.markdown(f"""
        <div style="padding:15px;border-radius:10px;background-color:{color};text-align:center;">
        <h3 style="color:white;">{titulo} (probabilidade {proba:.2f})</h3>
        </div>
        """, unsafe_allow_html=True)

        st.divider()
        st.markdown("### üìä Fatores de Maior Impacto no Modelo")
        feature_labels_pt = {
            "age": "Idade (anos)", "bmi": "IMC", "bp": "Press√£o Arterial M√©dia",
            "s1": "Colesterol Total", "s2": "LDL", "s3": "HDL",
            "s4": "Triglicer√≠deos", "s5": "Glicose", "s6": "Insulina"
        }
        importancias_leg = importancias.rename(index=feature_labels_pt)
        fig, ax = plt.subplots(figsize=(8, 5))
        sns.barplot(x=importancias_leg.values[:8], y=importancias_leg.index[:8], palette="rocket", ax=ax)
        ax.set_xlabel("Import√¢ncia Relativa")
        ax.set_ylabel("Vari√°veis Cl√≠nicas")
        st.pyplot(fig)

    # üîµ REGRESS√ÉO
    with tabs[1]:
        st.subheader("üìà Predi√ß√£o de Valor Cont√≠nuo (Progress√£o)")
        inputs_reg = {}
        for col, (label, vmin, vmax, vmed) in feature_labels_real.items():
            inputs_reg[col] = st.slider(label, float(vmin), float(vmax), float(vmed), step=1.0, key=f"reg_{col}")

        X_user_reg = []
        for col in reg_metrics["X_cols"]:
            if col == "sex":
                X_user_reg.append(0.0)
            elif col in inputs_reg:
                val = inputs_reg[col]
                vmin, vmax, vmed = feature_labels_real[col][1:]
                norm = (val - vmed) / (vmax - vmin)
                X_user_reg.append(norm)
            else:
                X_user_reg.append(0.0)

        pred_reg = modelos.prever_regressao(X_user_reg)
        if pred_reg <= 120:
            color, risco_txt, recomendacao = "#2ecc71", "Baixo", "‚úÖ Continue com bons h√°bitos."
        elif 120 < pred_reg <= 200:
            color, risco_txt, recomendacao = "#f1c40f", "Moderado", "‚ö†Ô∏è Mantenha dieta equilibrada e check-ups."
        else:
            color, risco_txt, recomendacao = "#e74c3c", "Alto", "üö® Procure acompanhamento m√©dico frequente."

        st.markdown(f"""
        <div style="padding:15px;border-radius:10px;background-color:{color};text-align:center;">
        <h3 style="color:white;">Progress√£o prevista: {pred_reg:.2f} ‚Äî <b>Risco {risco_txt}</b></h3>
        </div>
        """, unsafe_allow_html=True)
        st.info(recomendacao)

    # üß© AGRUPAMENTO
    with tabs[2]:
        st.subheader("üß© Agrupamento ‚Äî Identifica√ß√£o de Grupo Cl√≠nico")
        st.info("""
        O modelo de **clusteriza√ß√£o (K-Means)** identifica a qual **grupo cl√≠nico** o paciente pertence, 
        com base nas mesmas vari√°veis utilizadas na classifica√ß√£o e regress√£o.
        """)

        # üîπ Entradas do usu√°rio (iguais √†s abas anteriores)
        feature_labels_real = {
            "age": ("Idade (anos)", 20.0, 80.0, 40.0),
            "bmi": ("IMC (√çndice de Massa Corporal)", 15.0, 40.0, 25.0),
            "bp": ("Press√£o Arterial M√©dia (mmHg)", 60.0, 140.0, 90.0),
            "s1": ("Colesterol Total (mg/dL)", 150.0, 300.0, 200.0),
            "s2": ("LDL (Colesterol Ruim, mg/dL)", 70.0, 190.0, 120.0),
            "s3": ("HDL (Colesterol Bom, mg/dL)", 30.0, 80.0, 50.0),
            "s4": ("Triglicer√≠deos (mg/dL)", 50.0, 250.0, 150.0),
            "s5": ("N√≠vel de Glicose (mg/dL)", 70.0, 250.0, 110.0),
            "s6": ("Insulina no Sangue (¬µU/mL)", 2.0, 25.0, 10.0)
        }

        inputs_cluster = {}
        for col, (label, vmin, vmax, vmed) in feature_labels_real.items():
            inputs_cluster[col] = st.slider(label, float(vmin), float(vmax), float(vmed), step=1.0, key=f"cluster_{col}")

        # üî∏ Normaliza os dados para compatibilidade com o modelo
        X_user_cluster = []
        for col in reg_metrics["X_cols"]:  # mesma ordem de treino
            if col == "sex":
                X_user_cluster.append(0.0)
            elif col in inputs_cluster:
                val = inputs_cluster[col]
                vmin, vmax, vmed = feature_labels_real[col][1:]
                norm = (val - vmed) / (vmax - vmin)
                X_user_cluster.append(norm)
            else:
                X_user_cluster.append(0.0)

        # üîπ Predi√ß√£o do cluster
        cluster_pred = modelos.prever_cluster(X_user_cluster)

        # üîπ Exibi√ß√£o simples
        st.markdown(f"""
        <div style="padding:15px;border-radius:10px;background-color:#34495e;text-align:center;">
        <h3 style="color:white;">üß¨ O paciente pertence ao <b>Grupo {cluster_pred + 1}</b></h3>
        </div>
        """, unsafe_allow_html=True)

        # üí° Insights interpretativos
        st.markdown("### üí° Interpreta√ß√£o do Grupo:")
        if cluster_pred == 0:
            st.success("ü©∫ **Grupo 1:** Perfil equilibrado ‚Äî IMC e glicose dentro de faixas saud√°veis, baixo risco metab√≥lico.")
        elif cluster_pred == 1:
            st.warning("‚ö†Ô∏è **Grupo 2:** Leve aumento na press√£o arterial e colesterol ‚Äî manter acompanhamento preventivo.")
        elif cluster_pred == 2:
            st.error("üö® **Grupo 3:** IMC e glicose elevados ‚Äî risco maior de progress√£o do diabetes.")
        else:
            st.info("‚ÑπÔ∏è **Grupo 4:** Perfil misto ‚Äî valores intermedi√°rios entre glicose, colesterol e press√£o.")

# ===============================================================
# ‚ÑπÔ∏è 3Ô∏è‚É£ SOBRE
# ===============================================================
elif page == "Sobre":
    st.title("‚ÑπÔ∏è Sobre o Projeto")
    st.markdown("""
    Este aplicativo demonstra a aplica√ß√£o de **Machine Learning na √°rea da sa√∫de**, 
    com foco em **an√°lises preditivas sobre diabetes**.

    - **Modelos Utilizados:** Random Forest, Linear Regression, K-Means  
    - **Base de Dados:** `sklearn.datasets.load_diabetes`  
    - **Desenvolvido por:** Ivson Santana ‚Äî *para fins educacionais.*  
    ‚ö†Ô∏è *Este aplicativo n√£o substitui avalia√ß√£o m√©dica profissional.*
    """)
