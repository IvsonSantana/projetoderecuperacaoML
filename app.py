#%%
# ===============================================================
# üß† PROJETO: MACHINE LEARNING APLICADO √Ä SA√öDE ‚Äî DIABETES
# ===============================================================
# 
# üéØ OBJETIVO GERAL:
# Desenvolver uma aplica√ß√£o em Python (com interface Streamlit)
# que utilize t√©cnicas de aprendizado supervisionado e n√£o supervisionado
# para analisar e modelar dados cl√≠nicos de pacientes com diabetes.
# 
# O foco est√° em compreender os fatores que influenciam
# a progress√£o da doen√ßa e identificar poss√≠veis grupos
# de pacientes com perfis semelhantes.
# 
# ---------------------------------------------------------------
# üìò CONTEXTO DO ESTUDO:
# O conjunto de dados utilizado √© o "Diabetes Dataset",
# dispon√≠vel na biblioteca scikit-learn (fun√ß√£o load_diabetes()).
# 
# Ele cont√©m informa√ß√µes cl√≠nicas padronizadas de 442 pacientes
# diagnosticados com diabetes. Cada registro inclui vari√°veis como:
# 
# - age: idade do paciente
# - sex: sexo (masculino ou feminino)
# - bmi: √≠ndice de massa corporal
# - bp: press√£o arterial m√©dia
# - s1 a s6: medidas s√©ricas (colesterol total, LDL, HDL, triglicer√≠deos, etc.)
# - target: medida quantitativa da progress√£o da doen√ßa ap√≥s 1 ano
# 
# ---------------------------------------------------------------
# üîç PROBLEMA A SER INVESTIGADO:
# Todos os pacientes da base j√° s√£o diab√©ticos.
# Portanto, o objetivo do estudo n√£o √© identificar quem tem ou n√£o diabetes,
# mas sim compreender os fatores que influenciam a progress√£o da doen√ßa.
# 
# A partir disso, o estudo busca responder perguntas como:
# - Quais vari√°veis est√£o mais associadas √† progress√£o do diabetes?
# - √â poss√≠vel prever o grau de progress√£o de um paciente?
# - Existem grupos distintos de pacientes com perfis cl√≠nicos semelhantes?
# 
# ---------------------------------------------------------------
# üìä AN√ÅLISE EXPLORAT√ìRIA (EDA):
# A etapa inicial consiste em explorar o comportamento das vari√°veis:
# 
# - Verificar distribui√ß√µes, correla√ß√µes e poss√≠veis padr√µes cl√≠nicos.
# - Identificar rela√ß√µes importantes, como a correla√ß√£o entre IMC (bmi)
#   e press√£o arterial (bp), que se mostraram positivas.
# - Avaliar se fatores como idade e sexo t√™m impacto significativo.
# 
# Resultados observados:
# - N√£o h√° valores ausentes ou inconsist√™ncias.
# - Vari√°veis mais correlacionadas √† progress√£o da doen√ßa: bmi e s5.
# - Sexo n√£o apresentou correla√ß√£o relevante, sendo mantido apenas
#   como dado demogr√°fico.
# - IMC elevado e press√£o arterial alta aparecem como principais
#   indicadores de piora na progress√£o do diabetes.
# 
# ---------------------------------------------------------------
# ü©∫ DEFINI√á√ÉO DO PROBLEMA DE MACHINE LEARNING:
# Com base na an√°lise dos dados, foram definidos tr√™s objetivos:

# 1. **Classifica√ß√£o (Aprendizado Supervisionado):**
#    - Classificar os pacientes entre ‚Äúbaixa progress√£o‚Äù e ‚Äúalta progress√£o‚Äù 
#      da doen√ßa com base nas vari√°veis cl√≠nicas.
# 
# 2. **Regress√£o (Aprendizado Supervisionado):**
#    - Predizer o grau de progress√£o da doen√ßa (target)
#      com base nas vari√°veis cl√≠nicas.
# 
# 3. **Clusteriza√ß√£o (Aprendizado N√£o Supervisionado):**
#    - Agrupar pacientes de acordo com semelhan√ßas cl√≠nicas,
#      identificando perfis de risco distintos.
# 
# 4. **Visualiza√ß√£o Interativa:**
#    - Criar uma interface intuitiva em Streamlit,
#      permitindo explorar os dados, visualizar gr√°ficos
#      e interpretar os resultados dos modelos.
# 
# ---------------------------------------------------------------
# üìà INSIGHTS INICIAIS:
# - O aumento do IMC e da press√£o arterial tende a elevar a progress√£o da doen√ßa.
# - A idade apresenta varia√ß√£o normal, mas n√£o influencia fortemente o target.
# - Sexo n√£o √© um fator determinante, apresentando correla√ß√£o pr√≥xima de zero.
# - Os grupos identificados via clusteriza√ß√£o podem ajudar a compreender
#   padr√µes de risco, apoiando decis√µes m√©dicas e preventivas.
# 
# ---------------------------------------------------------------
# üß© CONCLUS√ÉO:
# Este projeto demonstra como t√©cnicas de Machine Learning podem ser aplicadas
# para apoiar o diagn√≥stico e o acompanhamento de doen√ßas cr√¥nicas como o diabetes,
# permitindo identificar padr√µes cl√≠nicos e prever a progress√£o da condi√ß√£o
# com base em dados objetivos.
# 
# A abordagem serve como exemplo de como ci√™ncia de dados e sa√∫de
# podem se unir para gerar insights valiosos e contribuir para a medicina preventiva.
# ===============================================================


#%%
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_diabetes
from sklearn.model_selection import train_test_split, StratifiedKFold, cross_val_score, learning_curve, validation_curve, GridSearchCV
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.pipeline import Pipeline
from sklearn.metrics import (
    accuracy_score, precision_score, recall_score, f1_score, roc_auc_score,
    confusion_matrix, ConfusionMatrixDisplay, RocCurveDisplay, classification_report,
    mean_absolute_error, mean_squared_error, r2_score, silhouette_score
)
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestRegressor

from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from kneed import KneeLocator

# %%
diabetes = load_diabetes()
df = pd.DataFrame(diabetes.data, columns=diabetes.feature_names)

print("Formato do dataset:", df.shape)
print("\nColunas dispon√≠veis:", df.columns.to_list())

df.head()
#
# %%

print(diabetes.DESCR)

# %%
print(df.info())
print("\nValores ausentes por coluna:\n", df.isnull().sum())
df.describe().T
# %%
plt.figure(figsize=(12, 10))
df.hist(bins=20, figsize=(12, 10), color="#1f77b4", edgecolor="black")
plt.suptitle("Distribui√ß√£o das vari√°veis do dataset de Diabetes", fontsize=16)
plt.show()

# %%
plt.figure(figsize=(6, 4))
sns.scatterplot(x='bmi', y='bp', data=df, color="#2ca02c")
plt.title("Rela√ß√£o entre IMC e Press√£o Arterial")
plt.xlabel("√çndice de Massa Corporal (bmi)")
plt.ylabel("Press√£o Arterial (bp)")
plt.show()

# %%
plt.figure(figsize=(10, 8))
sns.heatmap(df.corr(), annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Matriz de Correla√ß√£o entre as Vari√°veis")
plt.show()
# %%
plt.figure(figsize=(7, 4))
sns.histplot(df['age'], bins=30, kde=True, color="#1f77b4")
plt.title("Distribui√ß√£o da vari√°vel 'age' (idade normalizada)")
plt.xlabel("Idade (valor padronizado)")
plt.ylabel("Frequ√™ncia")
plt.show()
# %%
df['sexo_label'] = df['sex'].apply(lambda x: 'Masculino' if x > 0 else 'Feminino')
df[['sex', 'sexo_label']].head()
plt.figure(figsize=(6,4))
sns.countplot(x='sexo_label', data=df, palette="pastel")
plt.title("Distribui√ß√£o de Pacientes por Sexo")
plt.xlabel("Sexo")
plt.ylabel("Quantidade de Pacientes")
plt.show()

# %%
plt.figure(figsize=(7,5))
sns.boxplot(x='sexo_label', y='bmi', data=df, palette="Set2")
plt.title("Distribui√ß√£o do IMC (bmi) por Sexo")
plt.xlabel("Sexo")
plt.ylabel("√çndice de Massa Corporal (IMC)")
plt.show()

# %%
df['faixa_etaria'] = pd.cut(
    df['age'],
    bins=[-0.12, -0.06, 0.0, 0.06, 0.12],
    labels=['Jovens', 'Adultos Jovens', 'Adultos', 'Idosos']
)
plt.figure(figsize=(7,5))
sns.countplot(x='faixa_etaria', data=df, palette='crest')
plt.title("Distribui√ß√£o de Pacientes por Faixa Et√°ria", fontsize=14)
plt.xlabel("Faixa Et√°ria (estimada)")
plt.ylabel("Quantidade de Pacientes")
plt.show()
# %%
plt.figure(figsize=(8,5))
sns.countplot(x='faixa_etaria', hue='sexo_label', data=df, palette='Set2')
plt.title("Distribui√ß√£o de Pacientes por Faixa Et√°ria e Sexo", fontsize=14)
plt.xlabel("Faixa Et√°ria (estimada)")
plt.ylabel("Quantidade de Pacientes")
plt.legend(title="Sexo")
plt.show()

# %%
plt.figure(figsize=(6,4))
sns.boxplot(x='sexo_label', y='bmi', data=df, palette="Set2")
plt.title("Distribui√ß√£o do IMC por Sexo")
plt.show()

plt.figure(figsize=(6,4))
sns.boxplot(x='sexo_label', y=diabetes.target, data=df, palette="Set2")
plt.title("Progress√£o da Doen√ßa (target) por Sexo")
plt.show()
# %%
# Modelo de Classifica√ß√£o
df_model = df.select_dtypes(include=['float64', 'int64']).copy()
if 'sex' in df_model.columns:
    df_model.drop(columns=['sex'], inplace=True)
    print("Coluna 'sex' removida com sucesso.")
else:
    print("Coluna 'sex' j√° n√£o est√° presente.")
df_model['target'] = diabetes.target

print("\n Colunas num√©ricas selecionadas para os modelos:")
print(df_model.columns.to_list())
print("\n Valores ausentes no dataset:", df_model.isnull().sum().sum())
print("\n Informa√ß√µes gerais do df_model:")
df_model.info()
# %%
threshold = df_model['target'].median()
df_model['progressao_alta'] = (df_model['target'] >= threshold).astype(int)

X = df_model.drop(columns=['target', 'progressao_alta'])
y = df_model['progressao_alta']

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, random_state=42, stratify=y
)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
# %%
rf = RandomForestClassifier(
    n_estimators=300,
    random_state=42,
    max_depth=None,
    min_samples_split=2,
    min_samples_leaf=1
)
rf.fit(X_train, y_train)
# %%
y_pred = rf.predict(X_test)
y_prob = rf.predict_proba(X_test)[:, 1]

acc  = accuracy_score(y_test, y_pred)
prec = precision_score(y_test, y_pred)
rec  = recall_score(y_test, y_pred)
f1   = f1_score(y_test, y_pred)
auc  = roc_auc_score(y_test, y_prob)

print("=== Desempenho do Modelo ===")
print(f"Acur√°cia : {acc:.4f}")
print(f"Precis√£o : {prec:.4f}")
print(f"Recall   : {rec:.4f}")
print(f"F1-Score : {f1:.4f}")
print(f"ROC AUC  : {auc:.4f}")

print("\nRelat√≥rio de Classifica√ß√£o:\n")
print(classification_report(y_test, y_pred, zero_division=0))

# Matriz de Confus√£o
cm = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(cm, display_labels=['Baixa', 'Alta'])
disp.plot(cmap='Blues')
plt.title('Matriz de Confus√£o ‚Äî Random Forest')
plt.show()

# Curva ROC
RocCurveDisplay.from_predictions(y_test, y_prob)
plt.title(f'Curva ROC ‚Äî Random Forest (AUC={auc:.3f})')
plt.show()
# %%
importances = pd.Series(rf.feature_importances_, index=X.columns).sort_values(ascending=False)

plt.figure(figsize=(8,5))
sns.barplot(x=importances, y=importances.index, palette='viridis')
plt.title("Import√¢ncia das Vari√°veis - Random Forest")
plt.xlabel("Import√¢ncia")
plt.ylabel("Vari√°vel")
plt.show()

print("\nTop 5 vari√°veis mais importantes:")
print(importances.head())
# %%

# ===============================================================
# RELAT√ìRIO DE RESULTADOS ‚Äî MODELO DE CLASSIFICA√á√ÉO (Random Forest)
# ===============================================================
#
# OBJETIVO:
# Classificar os pacientes diab√©ticos entre ‚Äúbaixa progress√£o‚Äù e ‚Äúalta progress√£o‚Äù
# da doen√ßa, com base em vari√°veis cl√≠nicas como IMC, press√£o arterial e colesterol.
# A vari√°vel-alvo (target) representa a progress√£o da doen√ßa ap√≥s 1 ano de acompanhamento.
#
# ---------------------------------------------------------------
# MODELO UTILIZADO:
# RandomForestClassifier (n_estimators=300, random_state=42)
#
# Justificativa da escolha:
# - √â um modelo robusto contra ru√≠dos e correla√ß√µes entre vari√°veis cl√≠nicas.
# - Captura rela√ß√µes n√£o lineares entre as vari√°veis (por exemplo, IMC e colesterol).
# - Permite interpretar a import√¢ncia das features, o que √© fundamental em an√°lises m√©dicas.
# - Garante boa generaliza√ß√£o sem necessidade de muitos ajustes de hiperpar√¢metros.
#
# ---------------------------------------------------------------
# RESULTADOS OBTIDOS:
# Acur√°cia : 0.7895
# Precis√£o : 0.7568
# Recall   : 0.8485
# F1-Score : 0.8000
# ROC AUC  : 0.8440
#
# Esses valores indicam que o modelo consegue classificar corretamente cerca de 79% dos casos.
# A alta taxa de recall (‚âà85%) demonstra que o modelo identifica a maioria dos pacientes
# com alta progress√£o da doen√ßa, o que √© desej√°vel no contexto m√©dico.
#
# ---------------------------------------------------------------
# INTERPRETA√á√ÉO:
# - O modelo mostrou excelente capacidade de distinguir entre pacientes de baixa e alta progress√£o.
# - O valor de AUC = 0.84 indica um bom poder de separa√ß√£o das classes.
# - A matriz de confus√£o mostrou:
#     ‚ñ´Ô∏è 49 pacientes corretamente identificados como ‚Äúbaixa progress√£o‚Äù
#     ‚ñ´Ô∏è 56 pacientes corretamente identificados como ‚Äúalta progress√£o‚Äù
#     ‚ñ´Ô∏è 18 falsos positivos e 10 falsos negativos (quantidade aceit√°vel)
#
# Em um cen√°rio cl√≠nico, √© prefer√≠vel ter falsos positivos (monitorar pacientes saud√°veis)
# do que falsos negativos (n√£o identificar casos graves). Portanto, o modelo √© adequado
# para apoiar decis√µes m√©dicas preventivas.
#
# ---------------------------------------------------------------
# INSIGHTS CL√çNICOS:
# As vari√°veis mais relevantes para o modelo foram:
# IMC (bmi) ‚Äî pacientes com maior √≠ndice de massa corporal apresentam progress√£o mais r√°pida.
# Press√£o Arterial (bp) ‚Äî n√≠veis elevados se associam √† piora do quadro cl√≠nico.
# s5 ‚Äî relacionada ao metabolismo de lip√≠dios e colesterol.
#
# Esses fatores s√£o consistentes com o conhecimento m√©dico sobre complica√ß√µes do diabetes.
#
# ---------------------------------------------------------------
# CONCLUS√ÉO:
# O modelo de Random Forest apresentou um bom desempenho e alta sensibilidade na detec√ß√£o
# de pacientes com alta progress√£o da doen√ßa, sendo capaz de apoiar an√°lises preditivas
# e estrat√©gias de acompanhamento cl√≠nico.
#
# Em contextos pr√°ticos, poderia ser usado em sistemas de monitoramento preventivo,
# priorizando pacientes que exigem acompanhamento mais pr√≥ximo e interven√ß√µes precoces.
# ===============================================================

# %%
# Modelo de Regress√£o
X_reg = df_model.drop(columns=['target', 'progressao_alta'])
y_reg = df_model['target']

Xr_train, Xr_test, yr_train, yr_test = train_test_split(
    X_reg, y_reg, test_size=0.3, random_state=42
)

scaler_reg = StandardScaler()
Xr_train = scaler_reg.fit_transform(Xr_train)
Xr_test = scaler_reg.transform(Xr_test)

# %%
modelo_lr = LinearRegression()
modelo_lr.fit(Xr_train, yr_train)
# %%
y_pred_reg = modelo_lr.predict(Xr_test)

mae = mean_absolute_error(yr_test, y_pred_reg)
mse = mean_squared_error(yr_test, y_pred_reg)
r2 = r2_score(yr_test, y_pred_reg)

print("=== Desempenho do Modelo de Regress√£o ===")
print(f"Erro Absoluto M√©dio (MAE): {mae:.2f}")
print(f"Erro Quadr√°tico M√©dio (MSE): {mse:.2f}")
print(f"Coeficiente de Determina√ß√£o (R¬≤): {r2:.3f}")
# %%
plt.figure(figsize=(7,6))
plt.scatter(yr_test, y_pred_reg, color='royalblue', alpha=0.7)
plt.plot([yr_test.min(), yr_test.max()], [yr_test.min(), yr_test.max()], 'r--')
plt.xlabel("Valores Reais")
plt.ylabel("Valores Previstos")
plt.title("Regress√£o Linear ‚Äî Valores Reais vs Previstos")
plt.show()

#%%
coef = pd.Series(modelo_lr.coef_, index=X_reg.columns).sort_values(key=abs, ascending=False)

plt.figure(figsize=(8,5))
sns.barplot(x=coef.values, y=coef.index, palette='crest')
plt.title("Impacto das Vari√°veis na Progress√£o (Regress√£o Linear)")
plt.xlabel("Peso (coeficiente)")
plt.ylabel("Vari√°vel")
plt.show()

print("\nCoeficientes do modelo:")
print(coef)
# %%
# ===============================================================
# AN√ÅLISE DE DESEMPENHO ‚Äî MODELO DE REGRESS√ÉO LINEAR
# ===============================================================
#
# OBJETIVO:
# Prever o valor cont√≠nuo da progress√£o do diabetes (target)
# com base nas vari√°veis cl√≠nicas dos pacientes.
#
# ---------------------------------------------------------------
# RESULTADOS:
# Erro Absoluto M√©dio (MAE): 42.85
# Erro Quadr√°tico M√©dio (MSE): 2870.77
# Coeficiente de Determina√ß√£o (R¬≤): 0.468
#
# O modelo explica aproximadamente 47% da varia√ß√£o da progress√£o.
# O desempenho √© s√≥lido considerando a natureza cl√≠nica dos dados,
# onde fatores externos (h√°bitos, gen√©tica, ades√£o ao tratamento)
# n√£o s√£o capturados diretamente.
#
# ---------------------------------------------------------------
# INTERPRETA√á√ÉO DOS COEFICIENTES:
# - s1 (-39.3): colesterol total tem rela√ß√£o inversa com a progress√£o.
# - s5 (+32.3): lip√≠dios altos aumentam a progress√£o da doen√ßa.
# - bmi (+28.5): IMC √© um dos fatores mais impactantes.
# - bp (+16.4): press√£o arterial elevada agrava o quadro cl√≠nico.
# - age (-0.04): idade tem impacto m√≠nimo e n√£o significativo.
#
# ---------------------------------------------------------------
# CONCLUS√ÉO:
# O modelo de Regress√£o Linear apresentou bom desempenho e alta
# interpretabilidade. Mostrou que IMC, lip√≠dios e press√£o arterial
# s√£o os fatores mais influentes na progress√£o do diabetes,
# fornecendo um suporte anal√≠tico √∫til para acompanhamento cl√≠nico.
# ===============================================================
# %%
X_cluster = df_model.drop(columns=['target', 'progressao_alta'])

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_cluster)
# %%
sse = []
for k in range(2, 11):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(X_scaled)
    sse.append(kmeans.inertia_)

plt.figure(figsize=(7,5))
plt.plot(range(2, 11), sse, marker='o')
plt.title("M√©todo do Cotovelo ‚Äî Defini√ß√£o do n√∫mero ideal de Clusters")
plt.xlabel("N√∫mero de Clusters (k)")
plt.ylabel("Soma dos Erros Quadr√°ticos (SSE)")
plt.grid(True)
plt.show()
# %%
kmeans = KMeans(n_clusters=4, random_state=42)
clusters = kmeans.fit_predict(X_scaled)
df_model['cluster'] = clusters
# %%
pca = PCA(n_components=2)
pca_result = pca.fit_transform(X_scaled)
df_model['PCA1'] = pca_result[:, 0]
df_model['PCA2'] = pca_result[:, 1]
# %%
plt.figure(figsize=(8,6))
sns.scatterplot(
    x='PCA1', y='PCA2',
    hue='cluster', data=df_model,
    palette='Set2', alpha=0.8
)
plt.title("Agrupamento de Pacientes (K-Means + PCA)")
plt.xlabel("Componente Principal 1")
plt.ylabel("Componente Principal 2")
plt.legend(title="Cluster")
plt.show()
# %%
silhouette_avg = silhouette_score(X_scaled, clusters)
print(f"M√©dia da Silhueta: {silhouette_avg:.2f}")
# %%
cluster_summary = df_model.groupby('cluster').mean().round(2)
print("\n=== M√©dia das vari√°veis por cluster ===")
st.dataframe(cluster_summary)

# %%
# ===============================================================
# üßæ RELAT√ìRIO DE RESULTADOS ‚Äî CLUSTERIZA√á√ÉO (K-Means, k=4)
# ===============================================================
#
# üéØ OBJETIVO:
# Identificar grupos de pacientes com perfis cl√≠nicos semelhantes
# com base em vari√°veis cont√≠nuas (idade, IMC, press√£o arterial,
# e indicadores metab√≥licos). O intuito √© reconhecer padr√µes
# que indiquem diferentes n√≠veis de risco e progress√£o da doen√ßa.
#
# ---------------------------------------------------------------
# ‚öôÔ∏è MODELO:
# - Algoritmo: K-Means
# - N√∫mero de clusters: 4
# - Padroniza√ß√£o: StandardScaler
# - Visualiza√ß√£o: PCA (2 componentes principais)
#
# ---------------------------------------------------------------
# DESEMPENHO DO MODELO:
# - M√©todo do Cotovelo: Cotovelo identificado em k ‚âà 4
# - M√©dia da Silhueta: 0.22 ‚Üí separa√ß√£o moderada entre grupos
#
# Interpreta√ß√£o da Silhueta:
#   ‚ñ´Ô∏è Valores entre 0.2 e 0.3 indicam sobreposi√ß√£o leve,
#      mas com tend√™ncia a forma√ß√£o de grupos distingu√≠veis.
#   ‚ñ´Ô∏è Em datasets cl√≠nicos cont√≠nuos como este, valores
#      nessa faixa s√£o considerados aceit√°veis.
#
# ---------------------------------------------------------------
# RESULTADOS DOS CLUSTERS:
#
# A tabela de m√©dias indica os perfis m√©dios de cada grupo:
#
# | Cluster | IMC (bmi) | Press√£o (bp) | s5 (lip√≠dios) | Progress√£o M√©dia (target) |
# |----------|------------|----------------|----------------|----------------------------|
# | 0 | -0.03 | -0.03 | -0.04 | **106.89** |
# | 1 | 0.02 | 0.00 | 0.01 | **164.97** |
# | 2 | 0.00 | 0.00 | 0.03 | **156.42** |
# | 3 | 0.05 | 0.04 | 0.05 | **232.46** |
#
# ---------------------------------------------------------------
# INTERPRETA√á√ÉO CL√çNICA DOS GRUPOS:
#
# üü¢ **Cluster 0 ‚Äî Pacientes de Baixo Risco**
#   - IMC e press√£o arterial abaixo da m√©dia
#   - Menor progress√£o da doen√ßa (‚âà106)
#   - Representa pacientes metabolicamente est√°veis
#
# üü† **Cluster 1 ‚Äî Pacientes com Risco Moderado**
#   - IMC levemente acima da m√©dia
#   - Lip√≠dios (s5) e press√£o normais
#   - Progress√£o intermedi√°ria (‚âà165)
#
# üîµ **Cluster 2 ‚Äî Risco Metab√≥lico Elevado**
#   - s1 e s2 mais altos (indicando varia√ß√µes lip√≠dicas)
#   - Progress√£o um pouco abaixo do cluster 1 (‚âà156)
#   - Pode representar pacientes sob tratamento ou controle parcial
#
# üü£ **Cluster 3 ‚Äî Alto Risco e Progress√£o Acelerada**
#   - IMC e press√£o arterial bem acima da m√©dia
#   - Todos os indicadores metab√≥licos (s4, s5, s6) elevados
#   - Maior progress√£o da doen√ßa (‚âà232)
#   - Indica pacientes com fatores cl√≠nicos de risco combinados
#
# ---------------------------------------------------------------
# AN√ÅLISE GERAL:
# - O modelo conseguiu separar pacientes em quatro grupos
#   com perfis cl√≠nicos coerentes.
# - O grupo 0 representa pacientes controlados.
# - Os grupos 1 e 2 mostram n√≠veis intermedi√°rios com pequenas diferen√ßas
#   metab√≥licas.
# - O grupo 3 se destaca com alto risco cl√≠nico e progress√£o acentuada.
#
# ---------------------------------------------------------------
# INTERPRETA√á√ÉO VISUAL:
# O gr√°fico PCA mostra quatro regi√µes bem distribu√≠das,
# com sobreposi√ß√£o parcial entre clusters intermedi√°rios (1 e 2),
# e maior separa√ß√£o do grupo 0 (baixo risco) e grupo 3 (alto risco).
#
# ---------------------------------------------------------------
# CONCLUS√ÉO:
# - O K-Means (k=4) apresentou desempenho razo√°vel (Silhouette = 0.22),
#   segmentando o conjunto em perfis de progress√£o distintos.
# - Os grupos extremos (baixo e alto risco) s√£o bem definidos e √∫teis
#   para aplica√ß√µes cl√≠nicas e de monitoramento.
# - Essa segmenta√ß√£o pode apoiar a√ß√µes de sa√∫de preventiva e
#   personaliza√ß√£o do acompanhamento m√©dico de pacientes diab√©ticos.
# ===============================================================
# %%
# %%
